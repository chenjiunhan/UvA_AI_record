buses-own [
  ; Static, read-only variables. These values never change. You can read them, but you cannot change them.
  bus_id          ; The ID of a given agent (bus). Each agent has a unique ID.
  bus_type        ; The type of a given agent (bus). 1 means "small", 2 means "medium" and 3 means "large".
    
  ; Dynamic, read-only variables. These values may change over time. You can read them, but you cannot change them.
  inbox           ; List containing all the incoming messages (a given message is a list like this [tick sender message]).
  bus_passengers  ; List containing all the passengers that the agent (bus) is currently carrying (represented as a list like this [passenger_id bus_stop]).
  previous_stop   ; ID of the last bus stop that the agent (bus) visited (-1 means that the agent has not visited any bus stop yet).
  current_stop    ; ID of the bus stop where the agent (bus) currently is (-1 means that the agent is not at any bus stop).
  next_stop       ; ID of the bus stop the agent (bus) is traveling to (-1 means that the agent is not travelling to any bus stop).

  ; New local variables for students.
  ; You can create any new local variable you want. Just declare them here.
  
  Floyd_path             ; Create Floyd path to calculate shortest path
  intention              ; Intention of BDI model
  target_stop            ; The stop calculated by shortest path, bus will move to directly.
  previous_target_stop   ; For lowering the number of message
  destination_stop       ; The stop which is the final destination of intention of bus.
  fixed_schedule         ; We used fixed schedule in 1 week, but we have removed this.
  init_flag              ; Boolean. True if bus is initialized.
]
 
globals [graph]


extensions [table]

to init-buses
  ; Initialize your agents here.

  ; This list contains the topology of the entire network of bus stops, which is known to all agents. You can use this, for instance, to calculate the shortest path between two bus stops.
  set graph [[22 15 14] [11 19 23 7] [8] [16 4 20 9] [3 5 10] [4 16 10 17] [8] [1 17 13] [2 6 9] [3 8 20] [4 5 17 13 21] [1 16 17] [20 15 22] [7 10 22 23] [0 23] [0 12 18] [3 5 11] [5 7 10 11] [15] [1 23] [3 9 12 21] [10 20 22] [0 12 13 21] [1 13 14 19]]  
  
  ask buses [ 
    set inbox []
    
    
    if init_flag != 1 [
      
      ; bus is initialized
      set init_flag 1      
      
      ; Initialize shortest path matrix of bus
      set Floyd_path Floyd 
      
      ; remove fixed schedule
      ;set fixed_schedule [3 2 1 0 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23] 
      
      ; init destination_stop
      set destination_stop -1    
    ]
  ]  
  
end

; define interface for writting message
to-report write_message [action from_bus_id content]
  let message list from_bus_id action 
  set message lput content message  
  
  report message    
end


; Get shortest path list from stop_i to stop_j
to-report find_path [i j track_path]
  let bus_stop_id i
  let path_list []
  let counta 0
  set path_list lput bus_stop_id path_list
  while [bus_stop_id != j] [
    set counta counta + 1
    set bus_stop_id (item j (table:get track_path bus_stop_id))
    set path_list lput bus_stop_id path_list
    
    if counta > 100 or bus_stop_id = -1 [
      set bus_stop_id j 
    ]
  ]
  
  report path_list
  
end
  
; Given passengers_list, calculate planned route distance
to-report get_bus_route_distance [this_bus_id passengers_list] 
  let route_distance 0
  
  ask bus this_bus_id [
    let stop_A current_stop
        
    foreach passengers_list [
      
      let stop_B (item 1 ?)       
      let path find_path stop_A stop_B Floyd_path
            
      let count_path 0
      let path_stop_A -1
      let path_stop_B -1
      
      while [count_path < length path - 1] [
        set path_stop_A item count_path path
        set path_stop_B item (count_path + 1) path
        
        set route_distance (route_distance + get-distance path_stop_A path_stop_B)
        
        set count_path count_path + 1
      ]
      set stop_A (item 1 ?)
    ]
  ]

  report route_distance  
end

; Calculate Floyd shortest path matrix
to-report Floyd
  let adjacent_matrix table:make
  let track_path table:make
      
  let num_stops length graph
  ;let Adjacent_matrix []
  
  
  let count_from 0
  while [count_from != (length graph)] [
    let distance_list []
    let path []
    let count_to 0
    while [count_to != (length graph)] [
       let distance_from_to -1
       let path_init -1
       
       ifelse member? count_to (item count_from graph) [
         set distance_from_to (get-distance count_from count_to)
         set path_init count_to
       ] 
       [
         ifelse count_to = count_from [
           set distance_from_to 0           
         ]
         [
           set distance_from_to 1000000                    
         ]
       ]
       
       set distance_list lput distance_from_to distance_list
       set path lput path_init path
       set count_to count_to + 1
    ]
    table:put adjacent_matrix count_from distance_list
    table:put track_path count_from path
    set count_from count_from + 1
  ]
  
  let k 0
  while [k != (length graph)] [
    let i 0
    while [i != (length graph)] [
      let j 0
      while [j != (length graph)] [
        
        if item j (table:get adjacent_matrix i) > item k (table:get adjacent_matrix i) + item j (table:get adjacent_matrix k) [          
          table:put adjacent_matrix i (replace-item j (table:get adjacent_matrix i) (item k (table:get adjacent_matrix i) + item j (table:get adjacent_matrix k)))
          table:put track_path i (replace-item j (table:get track_path i) item k (table:get track_path i))
          
        ]
        
        set j j + 1 
      ]
      set i i + 1  
    ]
    set k k + 1 
  ]
  
  report track_path

end

to execute-actions
  ; Add decision making strategies for your agents here.
  ; You are allowed to use the global variable 'ticks'.  
  
  
  ; Negotiate for swapping passengers, when two buses are at the same stop. If the result of swap benefits both two buses, the swap is confirmed, otherwise the swap is canceled.
  ; "benefit" here means that the planned route distance decreases.
  ask buses [
    let bus1_stop current_stop
    let bus1_id bus_id       
    let bus1_passengers []
    let swap_flag false
    
    ask buses [
      
      let bus2_stop current_stop
      let bus2_id bus_id       
      let bus2_passengers bus_passengers                              
      
      ask bus bus1_id [set bus1_passengers bus_passengers]
      
      if bus1_stop = bus2_stop and bus1_stop >= 0 and bus1_id > bus2_id [
        if length bus2_passengers > 0 and length bus1_passengers > 0 [
          let min_passenger (min (list (length bus1_passengers) (length bus2_passengers)))          
          let i 0
          
          let try_swapping_bus1_passenger_list bus1_passengers
          let try_swapping_bus2_passenger_list bus2_passengers
          
          let min_bus1_route_distance get_bus_route_distance bus1_id bus1_passengers
          let min_bus2_route_distance get_bus_route_distance bus2_id bus2_passengers
          
          let bus1_drop_off_passenger_ids []
          let bus2_drop_off_passenger_ids []       
          
          while [i < min_passenger] [
            
            let bus1_passenger_id (item 0 (item i try_swapping_bus1_passenger_list))
            let bus2_passenger_id (item 0 (item i try_swapping_bus2_passenger_list))
            
            let temp_passenger (item i bus1_passengers)
            set try_swapping_bus1_passenger_list (replace-item i try_swapping_bus1_passenger_list (item i try_swapping_bus2_passenger_list))
            set try_swapping_bus2_passenger_list (replace-item i try_swapping_bus2_passenger_list temp_passenger)
            
            let bus1_swapping_route_distance get_bus_route_distance bus1_id try_swapping_bus1_passenger_list
            let bus2_swapping_route_distance get_bus_route_distance bus1_id try_swapping_bus1_passenger_list
            
            ; Check if swap benefits for both buses.
            ifelse bus1_swapping_route_distance < min_bus1_route_distance and bus2_swapping_route_distance < min_bus2_route_distance [
              set min_bus1_route_distance bus1_swapping_route_distance
              set min_bus2_route_distance bus2_swapping_route_distance
               
              set bus1_drop_off_passenger_ids lput bus1_passenger_id bus1_drop_off_passenger_ids
              set bus2_drop_off_passenger_ids lput bus2_passenger_id bus2_drop_off_passenger_ids
                                         
            ]            
            [
              ; Cancel swap
              set temp_passenger (item i bus1_passengers)
              set try_swapping_bus1_passenger_list (replace-item i try_swapping_bus1_passenger_list (item i try_swapping_bus2_passenger_list))
              set try_swapping_bus2_passenger_list (replace-item i try_swapping_bus2_passenger_list temp_passenger)
            ]                                    
                        
            set i i + 1            
          ]
          
          ; Drop passengers which will be swapped
          foreach bus1_drop_off_passenger_ids [ 
            let drop_passenger_id ?              
            ask bus bus1_id [     
              
              drop-off-passenger drop_passenger_id
            ]
          ]
                    
          foreach bus2_drop_off_passenger_ids [ 
            let drop_passenger_id ?              
            ask bus bus2_id [
             
              drop-off-passenger drop_passenger_id
            ]
          ]     
                     
          ; Pick passengers
          foreach bus1_drop_off_passenger_ids [ 
            let pick_up_passenger_id ?
            ask bus bus2_id [pick-up-passenger pick_up_passenger_id]
                        
          ]
          
          foreach bus2_drop_off_passenger_ids [ 
            let pick_up_passenger_id ?
            ask bus bus1_id [pick-up-passenger pick_up_passenger_id]
          ]
          
        ]        
      ]      
    ]    
  ]

  ; In this part, we must decide two topic. First topic is "if we should add bus". The voting procedure is purality, and the voters are be buses. Buses vote according to their capacity. 
  ; If current number of passenger >= about 50% capacity then buses vote yes.
  ; Second topic is "what's the size of added bus". The voting procedure is borda count, bus stops will be the voters, bus stops rank preference for small, medium and large according to
  ; how many people are waiting at bus stops.  
  
  ; Maximum number of buses, this is a tuned parameter.
  ; MAX_NUM_BUSES  
  if count buses <= 16 [
   
    ; decide if add bus with pluraity
    let yes 0
    let no 0
    
    ; Capacity
    ask buses [
      let capacity length bus_passengers
      let bus_capacity 0 
      if bus_type = 1 [
        ; CAPACITY_VOTE_S
        set bus_capacity 5
      ]
      if bus_type = 2 [
        ; CAPACITY_VOTE_M
        set bus_capacity 30
      ]
      if bus_type = 3 [
        ; CAPACITY_VOTE_L
        set bus_capacity 75
      ]
      
      if-else capacity > bus_capacity[
        set yes yes + 1
      ][
      set no no + 1
      ]
    ]
    
    ; Count vote for different sizes of bus
    let type_s 0
    let type_m 0
    let type_l 0
    
    let ABC 0
    ;let ACB 0 ;This permutation is meaningless, it's hard to define range for this permutation
    let BAC 0
    let BCA 0
    ;let CAB 0 ;This permutation is meaningless, it's hard to define range for this permutation
    let CBA 0
    
    ; RANGE_BORDA_COUNT
    let s_limit 6
    let m_limit 12
    let l_limit 24
    
    if yes > no [
      let new_bus_type -1
      
      ;Rank preference for small, medium and large according to how many people are waiting at bus stops. 
      ask bus_stops [ 
        let passenger_list_at_stop get-passengers-at-stop who
        
        ; RANGE_BORDA_COUNT                       
        if length passenger_list_at_stop < s_limit [
          set ABC ABC + 1
        ]
        ; RANGE_BORDA_COUNT
        if length passenger_list_at_stop >= s_limit and length passenger_list_at_stop <= m_limit [
          set BAC BAC + 1
        ]
        ; RANGE_BORDA_COUNT
        if length passenger_list_at_stop > m_limit and length passenger_list_at_stop <= l_limit [
          set BCA BCA + 1
        ]
        ; RANGE_BORDA_COUNT
        if length passenger_list_at_stop > l_limit [
          set CBA CBA + 1
        ]
      ]
        
      ; Count winner
      set type_s ABC * 2 + BAC * 1
      set type_m BAC * 2 + BCA * 2 + ABC * 1 + CBA * 1
      set type_l CBA * 2 + BCA * 1
          
      let type_list (list type_s type_m type_l )       
      set new_bus_type position (max (type_list)) type_list
      set new_bus_type new_bus_type + 1

      add-bus new_bus_type 
    ]    
  ]
  
  ; Update intention for BDI model
  update-intention
  
  
  ; In this part we run bus according to their intention, if there is no passenger on the bus, the intention will be "PICK_UP", otherwise it will be "RUN"
  ; A bus with PICK_UP intention will try to pick up nearest passenger, but bus will communicate with each other to prevent from picking up the same passenger.
  ; A bus with RUN intention will deliever passengers based on which destination stop of passengers is the shortest distance stop.
  
  ask buses [
    
    let passenger_on_bus []
    let passenger_off_bus []
    let bus_id_now bus_id
        
    let capacity 0
    if bus_type = 1 [
      set capacity 12
    ]
    if bus_type = 2 [
      set capacity 60
    ]
    if bus_type = 3 [
      set capacity 150
    ]
    
    if intention = "PICK_UP" [
       ; travel to target stop, target stop is shortest path, destination stop is final goal.
      ifelse current_stop = -1 and target_stop != current_stop [
         if target_stop != -1 [
           travel-to target_stop 
         ]
      ]
      [
        ; process message to prevent from picking up the same passenger.
        let prohibited_stops []
        
        foreach inbox [
          let action (item 0 ?)
          let from_bus_id (item 1 ?)
          let content (item 2 ?)
          if action = "target_stop" [
            set prohibited_stops lput content prohibited_stops            
          ]                     
        ]                
        
        set inbox []
        
        ; pick-up. If there is any passenger, pick the passenger up.
        let passenger_list []
        set passenger_list get-passengers-at-stop current_stop    
        if length passenger_list > 0 [          
            foreach passenger_list [ 
              if length bus_passengers < capacity [
                pick-up-passenger (item 0 ?) 
;
              ]
            ]                        
                   
        ]

        ; drop-off. If there is any destination of passenger is this stop, then drop the passenger off.
        foreach bus_passengers [
          if current_stop = (item 1 ?) [
            drop-off-passenger (item 0 ?)
          ]
        ]
        
        ; decide destination stop according to the shortest distance stop where people are waiting there
        if current_stop = destination_stop or destination_stop = -1 [  
          let closest_destination_stop -1
          let min_num_stops 1000          
          let passenger_path []          
          let passenger_list_at_stop []
          
          ask bus_stops [ 
            set passenger_list_at_stop get-passengers-at-stop who                       
            if length passenger_list_at_stop > 0 [
              let passenger_stop who
              set passenger_path (find_path [current_stop] of myself passenger_stop [Floyd_path] of myself)
              if length passenger_path < min_num_stops and not member? passenger_stop prohibited_stops [
                set min_num_stops length passenger_path
                set closest_destination_stop passenger_stop
              ]
            ]
          ]
          
          if closest_destination_stop = -1 [
            stop
          ]
          
          set destination_stop closest_destination_stop
        ]
        
        ; set target stop         
        let path []
        set path (find_path current_stop destination_stop Floyd_path)                              
        
        ifelse length path > 1 [
          set target_stop (item ((position current_stop path) + 1) path)
        ]
        [
          set target_stop -1
        ]
        
        if target_stop = current_stop [        
          set target_stop -1         
        ]  
        
        ; send message to tell other buses where will they go.
        if previous_target_stop != target_stop [
          let message write_message "target_stop" bus_id destination_stop
          ask buses with [not (bus_id = bus_id_now)]
          [
            if distance myself < 0.01 and length bus_passengers = 0 [
              send-message bus_id message
            ]
          ]  
        ]
        
      ]
      
      ifelse target_stop != -1 and target_stop != current_stop [
        travel-to target_stop 
      ]
      [
        set target_stop -1         
      ]  
    ]
    
    if intention = "RUN" [
      ifelse current_stop = -1 and target_stop != current_stop [
        if target_stop != -1 [
          travel-to target_stop 
        ]    
      ]
      [
        
        ; process message                        
        set inbox []
        
        ; pick-up
        let passenger_list []
        set passenger_list get-passengers-at-stop current_stop    
        if length passenger_list > 0 [
          
            foreach passenger_list [ 
              if length bus_passengers < capacity [
                pick-up-passenger (item 0 ?)             
              ]
            ]     
        ]

        ; drop-off
        foreach bus_passengers [
          if current_stop = (item 1 ?) [
            drop-off-passenger (item 0 ?)
          ]
        ]
        
        ; prevent from wasting money
        if length bus_passengers = 0 [
          stop 
        ]
        
        ; decide destination stop according to the shortest distance destination stop of passengers.
        if current_stop = destination_stop or destination_stop = -1 [  
          let closest_destination_stop -1
          let min_num_stops 1000          
          let passenger_path []
          
          foreach bus_passengers [ 
            let passenger_stop (item 1 ?)
            set passenger_path (find_path current_stop passenger_stop Floyd_path)
            if length passenger_path < min_num_stops [
              set min_num_stops length passenger_path
              set closest_destination_stop passenger_stop
            ]
          ]
          set destination_stop closest_destination_stop
        ]
        
        ; set target stop         
        let path []
        set path (find_path current_stop destination_stop Floyd_path)                
        
        ifelse length path > 1 [          
          set target_stop (item ((position current_stop path) + 1) path)
        ]     
        [          
          set target_stop -1
        ]    
        
        if target_stop = current_stop [        
          set target_stop -1         
        ]       
                
        ; send message to tell other buses where will they go.
        if previous_target_stop != target_stop [
          let message write_message "target_stop" bus_id destination_stop
          ask buses with [not (bus_id = bus_id_now)]
          [            
            if distance myself < 0.01 and length bus_passengers = 0 [
              send-message bus_id message
            ]
          ]  
        ]
                
      ]
      
      ifelse target_stop != -1 and target_stop != current_stop [
        travel-to target_stop 
      ]
      [
        set target_stop -1         
      ]
    ]
    set previous_target_stop target_stop
  ]
  
end

; Update intention according to number of passenger on the bus.
to update-intention
  ask buses [
    
    if length bus_passengers = 0 [
       set intention "PICK_UP"
       ;show "set PICK_UP"
    ]
    
    if length bus_passengers > 0 [
       set intention "RUN"
    ]        
  ]
end

